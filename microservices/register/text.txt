pool: null,
 server: null,
 disconnectHandler:
  Store {
    s:
     { storedOps: [ [length]: 0 ],
       storeOptions: { force: false, bufferMaxEntries: -1 },
       topology:
        Server {
          _events:
           { serverOpening: [Function],
             serverDescriptionChanged: [Function],
             serverHeartbeatStarted: [Function],
             serverHeartbeatSucceeded: [Function],
             serverHeartbeatFailed: [Function],
             serverClosed: [Function],
             topologyOpening: [Function],
             topologyClosed: [Function],
             topologyDescriptionChanged: [Function],
             commandStarted: [Function],
             commandSucceeded: [Function],
             commandFailed: [Function],
             joined: [Function],
             left: [Function],
             ping: [Function],
             ha: [Function],
             authenticated: [Function],
             error: [Array],
             timeout: [Array],
             close: [Array],
             parseError: [Array],
             open: [Array],
             fullsetup: [Array],
             all: [Array],
             reconnect: [Array] },
          _eventsCount: 25,
          _maxListeners: Infinity,
          clientInfo:
           { driver: [Object],
             os: [Object],
             platform: 'Node.js v9.8.0, LE' },
          s:
           { coreTopology: [Server],
             sCapabilities: [ServerCapabilities],
             clonedOptions: [Object],
             reconnect: true,
             emitError: true,
             poolSize: 5,
             storeOptions: [Object],
             store: [Circular],
             host: 'localhost',
             port: 27017,
             options: [Object],
             sessionPool: [ServerSessionPool],
             sessions: [Array],
             promiseLibrary: [Function] } } },
    length: [Getter] },
 bson: BSON {},
 ns: 'caliair.customers1',
 cmd:
  { find: 'caliair.customers1',
    limit: 0,
    skip: 0,
    query: {},
    readPreference: ReadPreference { mode: 'primary', tags: undefined, options: undefined },
    slaveOk: true },
 options:
  { readPreference: ReadPreference { mode: 'primary', tags: undefined, options: undefined },
    skip: 0,
    limit: 0,
    raw: undefined,
    hint: null,
    timeout: undefined,
    slaveOk: true,
    db:
     Db {
       _events: {},
       _eventsCount: 0,
       _maxListeners: undefined,
       s:
        { databaseName: 'caliair',
          dbCache: {},
          children: [ [length]: 0 ],
          topology:
           Server {
             _events: [Object],
             _eventsCount: 25,
             _maxListeners: Infinity,
             clientInfo: [Object],
             s: [Object] },
          options: { readPreference: [ReadPreference], promiseLibrary: [Function] },
          logger: Logger { className: 'Db' },
          bson: BSON {},
          readPreference: ReadPreference { mode: 'primary', tags: undefined, options: undefined },
          bufferMaxEntries: -1,
          parentDb: null,
          pkFactory: undefined,
          nativeParser: undefined,
          promiseLibrary:
           { [Function: Promise]
             [length]: 1,
             [name]: 'Promise',
             [prototype]: [Promise],
             [all]: [Function],
             [race]: [Function],
             [resolve]: [Function],
             [reject]: [Function],
             [Symbol(Symbol.species)]: [Getter] },
          noListener: false,
          readConcern: undefined },
       serverConfig: [Getter],
       bufferMaxEntries: [Getter],
       databaseName: [Getter] },
    promiseLibrary:
     { [Function: Promise]
       [length]: 1,
       [name]: 'Promise',
       [prototype]:
        Promise {
          [constructor]: [Circular],
          [then]: { [Function: then] [length]: 2, [name]: 'then' },
          [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
          [Symbol(Symbol.toStringTag)]: 'Promise' },
       [all]: { [Function: all] [length]: 1, [name]: 'all' },
       [race]: { [Function: race] [length]: 1, [name]: 'race' },
       [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
       [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
       [Symbol(Symbol.species)]: [Getter] },
    disconnectHandler:
     Store {
       s:
        { storedOps: [ [length]: 0 ],
          storeOptions: { force: false, bufferMaxEntries: -1 },
          topology:
           Server {
             _events: [Object],
             _eventsCount: 25,
             _maxListeners: Infinity,
             clientInfo: [Object],
             s: [Object] } },
       length: [Getter] },
    topology:
     Server {
       _events:
        { serverOpening: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          serverDescriptionChanged: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          serverHeartbeatStarted: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          serverHeartbeatFailed: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          serverClosed: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          topologyOpening: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          topologyClosed: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          topologyDescriptionChanged: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          commandStarted: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          commandSucceeded: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          commandFailed: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          joined: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          left: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          ping: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          ha: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          authenticated: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          error: [ [Function], [Function], [length]: 2 ],
          timeout: [ [Function], [Function], [length]: 2 ],
          close: [ [Function], [Function], [length]: 2 ],
          parseError: [ [Function], [Function], [length]: 2 ],
          open: [ [Function], [Function], [length]: 2 ],
          fullsetup: [ [Function], [Function], [length]: 2 ],
          all: [ [Function], [Function], [length]: 2 ],
          reconnect: [ [Function], [Function], [length]: 2 ] },
       _eventsCount: 25,
       _maxListeners: Infinity,
       clientInfo:
        { driver: { name: 'nodejs', version: '3.0.7' },
          os:
           { type: 'Darwin',
             name: 'darwin',
             architecture: 'x64',
             version: '17.3.0' },
          platform: 'Node.js v9.8.0, LE' },
       s:
        { coreTopology:
           Server {
             _events: [Object],
             _eventsCount: 20,
             _maxListeners: undefined,
             id: 0,
             s: [Object],
             ismaster: [Object],
             lastIsMasterMS: 7,
             monitoringProcessId: [Timeout],
             initialConnect: false,
             wireProtocolHandler: [WireProtocol],
             _type: 'server',
             clientInfo: [Object],
             lastUpdateTime: 0,
             lastWriteDate: 0,
             staleness: 0 },
          sCapabilities:
           ServerCapabilities {
             hasAggregationCursor: [Getter],
             hasWriteCommands: [Getter],
             hasTextSearch: [Getter],
             hasAuthCommands: [Getter],
             hasListCollectionsCommand: [Getter],
             hasListIndexesCommand: [Getter],
             minWireVersion: [Getter],
             maxWireVersion: [Getter],
             maxNumberOfDocsInBatch: [Getter],
             commandsTakeWriteConcern: [Getter],
             commandsTakeCollation: [Getter] },
          clonedOptions:
           { host: 'localhost',
             port: 27017,
             disconnectHandler: [Store],
             cursorFactory: [Function],
             reconnect: true,
             emitError: true,
             size: 5,
             monitorCommands: false,
             socketOptions: {},
             socketTimeout: 360000,
             connectionTimeout: 30000,
             promiseLibrary: [Function],
             clientInfo: [Object],
             bson: BSON {} },
          reconnect: true,
          emitError: true,
          poolSize: 5,
          storeOptions: { force: false, bufferMaxEntries: -1 },
          store: Store { s: [Object], length: [Getter] },
          host: 'localhost',
          port: 27017,
          options:
           { host: 'localhost',
             port: 27017,
             disconnectHandler: [Store],
             cursorFactory: [Function],
             reconnect: true,
             emitError: true,
             size: 5,
             monitorCommands: false,
             socketOptions: {},
             socketTimeout: 360000,
             connectionTimeout: 30000,
             promiseLibrary: [Function],
             clientInfo: [Object] },
          sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
          sessions: [ [length]: 0 ],
          promiseLibrary:
           { [Function: Promise]
             [length]: 1,
             [name]: 'Promise',
             [prototype]: [Promise],
             [all]: [Function],
             [race]: [Function],
             [resolve]: [Function],
             [reject]: [Function],
             [Symbol(Symbol.species)]: [Getter] } } } },
 topology:
  Server {
    _events:
     { serverOpening:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       serverDescriptionChanged:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       serverHeartbeatStarted:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       serverHeartbeatSucceeded:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       serverHeartbeatFailed:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       serverClosed:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       topologyOpening:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       topologyClosed:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       topologyDescriptionChanged:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       commandStarted:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       commandSucceeded:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       commandFailed:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       joined:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       left:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       ping:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       ha:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       authenticated:
        { [Function]
          [length]: 2,
          [name]: '',
          [prototype]: { [constructor]: [Circular] } },
       error:
        [ { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          { [Function: listener] [length]: 1, [name]: 'listener', [prototype]: [listener] },
          [length]: 2 ],
       timeout:
        [ { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          { [Function: listener] [length]: 1, [name]: 'listener', [prototype]: [listener] },
          [length]: 2 ],
       close:
        [ { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          { [Function: listener] [length]: 1, [name]: 'listener', [prototype]: [listener] },
          [length]: 2 ],
       parseError:
        [ { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          { [Function: listener] [length]: 1, [name]: 'listener', [prototype]: [listener] },
          [length]: 2 ],
       open:
        [ { [Function: bound onceWrapper]
            [length]: 0,
            [name]: 'bound onceWrapper',
            listener: [Function] },
          { [Function: bound onceWrapper]
            [length]: 0,
            [name]: 'bound onceWrapper',
            listener: [Function] },
          [length]: 2 ],
       fullsetup:
        [ { [Function: bound onceWrapper]
            [length]: 0,
            [name]: 'bound onceWrapper',
            listener: [Function] },
          { [Function: bound onceWrapper]
            [length]: 0,
            [name]: 'bound onceWrapper',
            listener: [Function] },
          [length]: 2 ],
       all:
        [ { [Function: bound onceWrapper]
            [length]: 0,
            [name]: 'bound onceWrapper',
            listener: [Function] },
          { [Function: bound onceWrapper]
            [length]: 0,
            [name]: 'bound onceWrapper',
            listener: [Function] },
          [length]: 2 ],
       reconnect:
        [ { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          { [Function: listener] [length]: 1, [name]: 'listener', [prototype]: [listener] },
          [length]: 2 ] },
    _eventsCount: 25,
    _maxListeners: Infinity,
    clientInfo:
     { driver: { name: 'nodejs', version: '3.0.7' },
       os:
        { type: 'Darwin',
          name: 'darwin',
          architecture: 'x64',
          version: '17.3.0' },
       platform: 'Node.js v9.8.0, LE' },
    s:
     { coreTopology:
        Server {
          _events:
           { reconnect: [Function],
             reconnectFailed: [Function],
             serverDescriptionChanged: [Function],
             serverHeartbeatStarted: [Function],
             serverHeartbeatSucceeded: [Function],
             serverHeartbeatFailed: [Function],
             serverOpening: [Function],
             serverClosed: [Function],
             topologyOpening: [Function],
             topologyClosed: [Function],
             topologyDescriptionChanged: [Function],
             commandStarted: [Function],
             commandSucceeded: [Function],
             commandFailed: [Function],
             attemptReconnect: [Function],
             monitoring: [Function],
             timeout: [Function],
             error: [Function],
             close: [Function],
             destroy: [Function] },
          _eventsCount: 20,
          _maxListeners: undefined,
          id: 0,
          s:
           { options: [Object],
             logger: [Logger],
             Cursor: [Function],
             bson: BSON {},
             pool: [Pool],
             disconnectHandler: [Store],
             monitoring: true,
             inTopology: false,
             monitoringInterval: 5000,
             topologyId: -1,
             compression: [Object],
             parent: undefined,
             clusterTime: null,
             serverDescription: [Object],
             topologyDescription: [Object] },
          ismaster:
           { ismaster: true,
             maxBsonObjectSize: 16777216,
             maxMessageSizeBytes: 48000000,
             maxWriteBatchSize: 100000,
             localTime: 2018-04-24T05:04:16.497Z,
             logicalSessionTimeoutMinutes: 30,
             minWireVersion: 0,
             maxWireVersion: 6,
             readOnly: false,
             ok: 1 },
          lastIsMasterMS: 7,
          monitoringProcessId:
           Timeout {
             _called: false,
             _idleTimeout: 5000,
             _idlePrev: [TimersList],
             _idleNext: [TimersList],
             _idleStart: 2121,
             _onTimeout: [Function],
             _timerArgs: undefined,
             _repeat: null,
             _destroyed: false,
             [Symbol(asyncId)]: 53,
             [Symbol(triggerAsyncId)]: 51 },
          initialConnect: false,
          wireProtocolHandler: WireProtocol { legacyWireProtocol: WireProtocol {} },
          _type: 'server',
          clientInfo:
           { driver: [Object],
             os: [Object],
             platform: 'Node.js v9.8.0, LE, mongodb-core: 3.0.7' },
          lastUpdateTime: 0,
          lastWriteDate: 0,
          staleness: 0 },
       sCapabilities:
        ServerCapabilities {
          hasAggregationCursor: [Getter],
          hasWriteCommands: [Getter],
          hasTextSearch: [Getter],
          hasAuthCommands: [Getter],
          hasListCollectionsCommand: [Getter],
          hasListIndexesCommand: [Getter],
          minWireVersion: [Getter],
          maxWireVersion: [Getter],
          maxNumberOfDocsInBatch: [Getter],
          commandsTakeWriteConcern: [Getter],
          commandsTakeCollation: [Getter] },
       clonedOptions:
        { host: 'localhost',
          port: 27017,
          disconnectHandler: Store { s: [Object], length: [Getter] },
          cursorFactory:
           { [Function: Cursor]
             [length]: 6,
             [name]: 'Cursor',
             [prototype]: [Cursor],
             super_: [Function],
             INIT: 0,
             OPEN: 1,
             CLOSED: 2,
             GET_MORE: 3 },
          reconnect: true,
          emitError: true,
          size: 5,
          monitorCommands: false,
          socketOptions: {},
          socketTimeout: 360000,
          connectionTimeout: 30000,
          promiseLibrary:
           { [Function: Promise]
             [length]: 1,
             [name]: 'Promise',
             [prototype]: [Promise],
             [all]: [Function],
             [race]: [Function],
             [resolve]: [Function],
             [reject]: [Function],
             [Symbol(Symbol.species)]: [Getter] },
          clientInfo:
           { driver: [Object],
             os: [Object],
             platform: 'Node.js v9.8.0, LE' },
          bson: BSON {} },
       reconnect: true,
       emitError: true,
       poolSize: 5,
       storeOptions: { force: false, bufferMaxEntries: -1 },
       store:
        Store {
          s:
           { storedOps: [Array],
             storeOptions: [Object],
             topology: [Circular] },
          length: [Getter] },
       host: 'localhost',
       port: 27017,
       options:
        { host: 'localhost',
          port: 27017,
          disconnectHandler: Store { s: [Object], length: [Getter] },
          cursorFactory:
           { [Function: Cursor]
             [length]: 6,
             [name]: 'Cursor',
             [prototype]: [Cursor],
             super_: [Function],
             INIT: 0,
             OPEN: 1,
             CLOSED: 2,
             GET_MORE: 3 },
          reconnect: true,
          emitError: true,
          size: 5,
          monitorCommands: false,
          socketOptions: {},
          socketTimeout: 360000,
          connectionTimeout: 30000,
          promiseLibrary:
           { [Function: Promise]
             [length]: 1,
             [name]: 'Promise',
             [prototype]: [Promise],
             [all]: [Function],
             [race]: [Function],
             [resolve]: [Function],
             [reject]: [Function],
             [Symbol(Symbol.species)]: [Getter] },
          clientInfo:
           { driver: [Object],
             os: [Object],
             platform: 'Node.js v9.8.0, LE' } },
       sessionPool:
        ServerSessionPool {
          topology:
           Server {
             _events: [Object],
             _eventsCount: 20,
             _maxListeners: undefined,
             id: 0,
             s: [Object],
             ismaster: [Object],
             lastIsMasterMS: 7,
             monitoringProcessId: [Timeout],
             initialConnect: false,
             wireProtocolHandler: [WireProtocol],
             _type: 'server',
             clientInfo: [Object],
             lastUpdateTime: 0,
             lastWriteDate: 0,
             staleness: 0 },
          sessions: [ [length]: 0 ] },
       sessions: [ [length]: 0 ],
       promiseLibrary:
        { [Function: Promise]
          [length]: 1,
          [name]: 'Promise',
          [prototype]:
           Promise {
             [constructor]: [Circular],
             [then]: [Function],
             [catch]: [Function],
             [Symbol(Symbol.toStringTag)]: 'Promise' },
          [all]: { [Function: all] [length]: 1, [name]: 'all' },
          [race]: { [Function: race] [length]: 1, [name]: 'race' },
          [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
          [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
          [Symbol(Symbol.species)]: [Getter] } } },
 cursorState:
  { cursorId: null,
    cmd:
     { find: 'caliair.customers1',
       limit: 0,
       skip: 0,
       query: {},
       readPreference: ReadPreference { mode: 'primary', tags: undefined, options: undefined },
       slaveOk: true },
    documents: [ [length]: 0 ],
    cursorIndex: 0,
    dead: false,
    killed: false,
    init: false,
    notified: false,
    limit: 0,
    skip: 0,
    batchSize: 1000,
    currentLimit: 0,
    transforms: undefined,
    reconnect: true },
 logger: Logger { className: 'Cursor' },
 _readableState:
  ReadableState {
    objectMode: true,
    highWaterMark: 16,
    buffer: BufferList { head: null, tail: null, length: 0 },
    length: 0,
    pipes: null,
    pipesCount: 0,
    flowing: null,
    ended: false,
    endEmitted: false,
    reading: false,
    sync: true,
    needReadable: false,
    emittedReadable: false,
    readableListening: false,
    resumeScheduled: false,
    destroyed: false,
    defaultEncoding: 'utf8',
    awaitDrain: 0,
    readingMore: false,
    decoder: null,
    encoding: null },
 readable: true,
 _events: {},
 _eventsCount: 0,
 _maxListeners: undefined,
 s:
  { numberOfRetries: 5,
    tailableRetryInterval: 500,
    currentNumberOfRetries: 5,
    state: 0,
    streamOptions: {},
    bson: BSON {},
    ns: 'caliair.customers1',
    cmd:
     { find: 'caliair.customers1',
       limit: 0,
       skip: 0,
       query: {},
       readPreference: ReadPreference { mode: 'primary', tags: undefined, options: undefined },
       slaveOk: true },
    options:
     { readPreference: ReadPreference { mode: 'primary', tags: undefined, options: undefined },
       skip: 0,
       limit: 0,
       raw: undefined,
       hint: null,
       timeout: undefined,
       slaveOk: true,
       db:
        Db {
          _events: {},
          _eventsCount: 0,
          _maxListeners: undefined,
          s:
           { databaseName: 'caliair',
             dbCache: {},
             children: [Array],
             topology: [Server],
             options: [Object],
             logger: [Logger],
             bson: BSON {},
             readPreference: [ReadPreference],
             bufferMaxEntries: -1,
             parentDb: null,
             pkFactory: undefined,
             nativeParser: undefined,
             promiseLibrary: [Function],
             noListener: false,
             readConcern: undefined },
          serverConfig: [Getter],
          bufferMaxEntries: [Getter],
          databaseName: [Getter] },
       promiseLibrary:
        { [Function: Promise]
          [length]: 1,
          [name]: 'Promise',
          [prototype]:
           Promise {
             [constructor]: [Circular],
             [then]: [Function],
             [catch]: [Function],
             [Symbol(Symbol.toStringTag)]: 'Promise' },
          [all]: { [Function: all] [length]: 1, [name]: 'all' },
          [race]: { [Function: race] [length]: 1, [name]: 'race' },
          [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
          [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
          [Symbol(Symbol.species)]: [Getter] },
       disconnectHandler:
        Store {
          s:
           { storedOps: [Array],
             storeOptions: [Object],
             topology: [Server] },
          length: [Getter] },
       topology:
        Server {
          _events:
           { serverOpening: [Function],
             serverDescriptionChanged: [Function],
             serverHeartbeatStarted: [Function],
             serverHeartbeatSucceeded: [Function],
             serverHeartbeatFailed: [Function],
             serverClosed: [Function],
             topologyOpening: [Function],
             topologyClosed: [Function],
             topologyDescriptionChanged: [Function],
             commandStarted: [Function],
             commandSucceeded: [Function],
             commandFailed: [Function],
             joined: [Function],
             left: [Function],
             ping: [Function],
             ha: [Function],
             authenticated: [Function],
             error: [Array],
             timeout: [Array],
             close: [Array],
             parseError: [Array],
             open: [Array],
             fullsetup: [Array],
             all: [Array],
             reconnect: [Array] },
          _eventsCount: 25,
          _maxListeners: Infinity,
          clientInfo:
           { driver: [Object],
             os: [Object],
             platform: 'Node.js v9.8.0, LE' },
          s:
           { coreTopology: [Server],
             sCapabilities: [ServerCapabilities],
             clonedOptions: [Object],
             reconnect: true,
             emitError: true,
             poolSize: 5,
             storeOptions: [Object],
             store: [Store],
             host: 'localhost',
             port: 27017,
             options: [Object],
             sessionPool: [ServerSessionPool],
             sessions: [Array],
             promiseLibrary: [Function] } } },
    topology:
     Server {
       _events:
        { serverOpening: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          serverDescriptionChanged: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          serverHeartbeatStarted: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          serverHeartbeatSucceeded: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          serverHeartbeatFailed: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          serverClosed: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          topologyOpening: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          topologyClosed: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          topologyDescriptionChanged: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          commandStarted: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          commandSucceeded: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          commandFailed: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          joined: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          left: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          ping: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          ha: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          authenticated: { [Function] [length]: 2, [name]: '', [prototype]: [Object] },
          error: [ [Function], [Function], [length]: 2 ],
          timeout: [ [Function], [Function], [length]: 2 ],
          close: [ [Function], [Function], [length]: 2 ],
          parseError: [ [Function], [Function], [length]: 2 ],
          open: [ [Function], [Function], [length]: 2 ],
          fullsetup: [ [Function], [Function], [length]: 2 ],
          all: [ [Function], [Function], [length]: 2 ],
          reconnect: [ [Function], [Function], [length]: 2 ] },
       _eventsCount: 25,
       _maxListeners: Infinity,
       clientInfo:
        { driver: { name: 'nodejs', version: '3.0.7' },
          os:
           { type: 'Darwin',
             name: 'darwin',
             architecture: 'x64',
             version: '17.3.0' },
          platform: 'Node.js v9.8.0, LE' },
       s:
        { coreTopology:
           Server {
             _events: [Object],
             _eventsCount: 20,
             _maxListeners: undefined,
             id: 0,
             s: [Object],
             ismaster: [Object],
             lastIsMasterMS: 7,
             monitoringProcessId: [Timeout],
             initialConnect: false,
             wireProtocolHandler: [WireProtocol],
             _type: 'server',
             clientInfo: [Object],
             lastUpdateTime: 0,
             lastWriteDate: 0,
             staleness: 0 },
          sCapabilities:
           ServerCapabilities {
             hasAggregationCursor: [Getter],
             hasWriteCommands: [Getter],
             hasTextSearch: [Getter],
             hasAuthCommands: [Getter],
             hasListCollectionsCommand: [Getter],
             hasListIndexesCommand: [Getter],
             minWireVersion: [Getter],
             maxWireVersion: [Getter],
             maxNumberOfDocsInBatch: [Getter],
             commandsTakeWriteConcern: [Getter],
             commandsTakeCollation: [Getter] },
          clonedOptions:
           { host: 'localhost',
             port: 27017,
             disconnectHandler: [Store],
             cursorFactory: [Function],
             reconnect: true,
             emitError: true,
             size: 5,
             monitorCommands: false,
             socketOptions: {},
             socketTimeout: 360000,
             connectionTimeout: 30000,
             promiseLibrary: [Function],
             clientInfo: [Object],
             bson: BSON {} },
          reconnect: true,
          emitError: true,
          poolSize: 5,
          storeOptions: { force: false, bufferMaxEntries: -1 },
          store: Store { s: [Object], length: [Getter] },
          host: 'localhost',
          port: 27017,
          options:
           { host: 'localhost',
             port: 27017,
             disconnectHandler: [Store],
             cursorFactory: [Function],
             reconnect: true,
             emitError: true,
             size: 5,
             monitorCommands: false,
             socketOptions: {},
             socketTimeout: 360000,
             connectionTimeout: 30000,
             promiseLibrary: [Function],
             clientInfo: [Object] },
          sessionPool: ServerSessionPool { topology: [Server], sessions: [Array] },
          sessions: [ [length]: 0 ],
          promiseLibrary:
           { [Function: Promise]
             [length]: 1,
             [name]: 'Promise',
             [prototype]: [Promise],
             [all]: [Function],
             [race]: [Function],
             [resolve]: [Function],
             [reject]: [Function],
             [Symbol(Symbol.species)]: [Getter] } } },
    topologyOptions:
     { host: 'localhost',
       port: 27017,
       disconnectHandler:
        Store {
          s:
           { storedOps: [Array],
             storeOptions: [Object],
             topology: [Server] },
          length: [Getter] },
       cursorFactory:
        { [Function: Cursor]
          [length]: 6,
          [name]: 'Cursor',
          [prototype]:
           Cursor {
             [constructor]: [Circular],
             _next: [Function],
             setCursorBatchSize: [Function],
             cursorBatchSize: [Function],
             setCursorLimit: [Function],
             cursorLimit: [Function],
             setCursorSkip: [Function],
             cursorSkip: [Function],
             _endSession: [Function],
             _find: [Function],
             _getmore: [Function],
             clone: [Function],
             isDead: [Function],
             isKilled: [Function],
             isNotified: [Function],
             bufferedCount: [Function],
             readBufferedDocuments: [Function],
             kill: [Function],
             rewind: [Function],
             next: [Function],
             _initImplicitSession: [Function],
             hasNext: [Function],
             filter: [Function],
             maxScan: [Function],
             hint: [Function],
             min: [Function],
             max: [Function],
             returnKey: [Function],
             showRecordId: [Function],
             snapshot: [Function],
             setCursorOption: [Function],
             addCursorFlag: [Function],
             addQueryModifier: [Function],
             comment: [Function],
             maxAwaitTimeMS: [Function],
             maxTimeMS: [Function],
             maxTimeMs: [Function],
             project: [Function],
             sort: [Function],
             batchSize: [Function],
             collation: [Function],
             limit: [Function],
             skip: [Function],
             each: [Function],
             forEach: [Function],
             setReadPreference: [Function],
             toArray: [Function],
             count: [Function],
             close: [Function],
             map: [Function],
             isClosed: [Function],
             destroy: [Function],
             stream: [Function],
             explain: [Function],
             _read: [Function],
             readPreference: [Getter],
             namespace: [Getter] },
          super_:
           { [Function: Readable]
             [length]: 1,
             [name]: 'Readable',
             [prototype]: [Readable],
             ReadableState: [Function],
             super_: [Function],
             _fromList: [Function] },
          INIT: 0,
          OPEN: 1,
          CLOSED: 2,
          GET_MORE: 3 },
       reconnect: true,
       emitError: true,
       size: 5,
       monitorCommands: false,
       socketOptions: {},
       socketTimeout: 360000,
       connectionTimeout: 30000,
       promiseLibrary:
        { [Function: Promise]
          [length]: 1,
          [name]: 'Promise',
          [prototype]:
           Promise {
             [constructor]: [Circular],
             [then]: [Function],
             [catch]: [Function],
             [Symbol(Symbol.toStringTag)]: 'Promise' },
          [all]: { [Function: all] [length]: 1, [name]: 'all' },
          [race]: { [Function: race] [length]: 1, [name]: 'race' },
          [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
          [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
          [Symbol(Symbol.species)]: [Getter] },
       clientInfo:
        { driver: { name: 'nodejs', version: '3.0.7' },
          os:
           { type: 'Darwin',
             name: 'darwin',
             architecture: 'x64',
             version: '17.3.0' },
          platform: 'Node.js v9.8.0, LE' },
       bson: BSON {} },
    promiseLibrary:
     { [Function: Promise]
       [length]: 1,
       [name]: 'Promise',
       [prototype]:
        Promise {
          [constructor]: [Circular],
          [then]: { [Function: then] [length]: 2, [name]: 'then' },
          [catch]: { [Function: catch] [length]: 1, [name]: 'catch' },
          [Symbol(Symbol.toStringTag)]: 'Promise' },
       [all]: { [Function: all] [length]: 1, [name]: 'all' },
       [race]: { [Function: race] [length]: 1, [name]: 'race' },
       [resolve]: { [Function: resolve] [length]: 1, [name]: 'resolve' },
       [reject]: { [Function: reject] [length]: 1, [name]: 'reject' },
       [Symbol(Symbol.species)]: [Getter] },
    currentDoc: null,
    session: undefined },
 sortValue: undefined }
